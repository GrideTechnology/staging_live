<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Srmklive\PayPal\Services\PayPal as PayPalClient;

//namespace App\Http\Controllers;

// use Illuminate\Http\Request;
use Laravel\Cashier\Cashier;
use Stripe\Stripe;
use Stripe\PaymentIntent;
use Exception;
use Illuminate\Validation\Rule;

class PayPalController extends Controller
{
    public function pay(Request $request)
    {   
        $this->validate($request, [
            'currency_code'    => 'required',
            'value' => 'required',
        ]);
       // return $request->all();
        $clientId = env('PAYPAL_CLIENT_ID');
        $clientSecret = env('PAYPAL_SECRET');
//         PAYPAL_CLIENT_ID=ATtx61MX4WUbUJqTnI11-r3TnSaICNkUoHiMm7slnXst0xevgphN8cu7NGTBW_6G6VNuRFcO_CiPVM41
// PAYPAL_SECRET=EC4TtM1y1CQ_pb1V_AvT5mC1ppUmq380BG0mWgGPuu40DFLJNQVPPCLg7xpJgZD6y3Bz9NMlQ7PDDR1M
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/oauth2/token');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "grant_type=client_credentials");
        curl_setopt($ch, CURLOPT_USERPWD, "$clientId" . ':' . "$clientSecret");

        $headers = array();
        $headers[] = 'Content-Type: application/x-www-form-urlencoded';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

         //$result = curl_exec($ch);
         $response = curl_exec($ch);
        $responseData = json_decode($response, true);

        // Check if decoding was successful and "access_token" exists
        if (isset($responseData['access_token'])) {
            $accessToken = $responseData['access_token'];
            // Now $accessToken contains the value of "access_token"
            //echo "Access Token: " . $accessToken;


            $curl = curl_init();

            // Define your dynamic variables
            $intent = "CAPTURE";
            $currency_code = $request->currency_code;
            $value = $request->value;
            
            // Create an associative array for the JSON payload
            $payload = [
                "intent" => $intent,
                "purchase_units" => [
                    [
                        "amount" => [
                            "currency_code" => $currency_code,
                            "value" => $value,
                        ],
                    ],
                ],
            ];
            
            $jsonPayload = json_encode($payload);
            
            curl_setopt_array($curl, array(
                CURLOPT_URL => 'https://api-m.sandbox.paypal.com/v2/checkout/orders',
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => '',
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => 'POST',
                CURLOPT_POSTFIELDS => $jsonPayload, // Use the dynamic JSON payload
                CURLOPT_HTTPHEADER => array(
                    'Content-Type: application/json',
                    'Prefer: return=representation',
                    // 'PayPal-Request-Id: f200e5b4-7bab-4216-b05b-2c6af76649ab',
                    'Authorization: Bearer '.$accessToken
                ),
            ));
            
            $response = curl_exec($curl);
            
               return $responseData = json_decode($response, true);
                curl_close($curl);
                echo $response;




            
        } else {
            echo "Access Token not found in the response.";
        }
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);
        // 

        // $curl = curl_init();

        // curl_setopt_array($curl, array(
        //     CURLOPT_URL => 'https://api-m.sandbox.paypal.com/v1/oauth2/token',
        //     CURLOPT_RETURNTRANSFER => true,
        //     CURLOPT_ENCODING => '',
        //     CURLOPT_MAXREDIRS => 10,
        //     CURLOPT_TIMEOUT => 0,
        //     CURLOPT_FOLLOWLOCATION => true,
        //     CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
        //     CURLOPT_CUSTOMREQUEST => 'POST',
        //     CURLOPT_POSTFIELDS => 'grant_type=client_credentials&ignoreCache=true&return_authn_schemes=true&return_client_metadata=true&return_unconsented_scopes=true',
        //     CURLOPT_HTTPHEADER => array(
        //         'Authorization: Basic QVR0eDYxTVg0V1ViVUpxVG5JMTEtcjNUblNhSUNOa1VvSGlNbTdzbG5Yc3QweGV2Z3BoTjhjdTdOR1RCV182RzZWTnVSRmNPX0NpUFZNNDE6RUM0VHRNMXkxQ1FfcGIxVl9BdlQ1bUMxcHBVbXEzODBCRzBtV2dHUHV1NDBERkxKTlFWUFBDTGc3eHBKZ1pENnkzQno5Tk1sUTdQRERSMU0=',
        //         'Content-Type: application/x-www-form-urlencoded'
        //     ),
        // ));

        // $response = curl_exec($curl);
        // $responseData = json_decode($response, true);

        // // Check if decoding was successful and "access_token" exists
        // if (isset($responseData['access_token'])) {
        //     $accessToken = $responseData['access_token'];
        //     // Now $accessToken contains the value of "access_token"
        //     echo "Access Token: " . $accessToken;

            
        // } else {
        //     echo "Access Token not found in the response.";
        // }
        // curl_close($curl);
    }
    
    public function return(Request $request)
    {
        // Handle the return from PayPal after payment completion.
        // You can customize this method to process the payment confirmation.

        try {
            // Check if the payment was successful
            if ($request->input('success') === 'true') {
                // Payment successful
                return view('paypal.success');
            } else {
                // Payment failed
                return view('paypal.failure');
            }
        } catch (Exception $e) {
            return back()->withError($e->getMessage());
        }
    }
    /**
     * create transaction.
     *
     * @return \Illuminate\Http\Response
     */
    public function createTransaction()
    {
        return view('transaction');
    }
    /**
     * process transaction.
     *
     * @return \Illuminate\Http\Response
     */
    public function processTransaction(Request $request)
    {
        $provider = new PayPalClient;
        $provider->setApiCredentials(config('paypal'));
        $paypalToken = $provider->getAccessToken();
        $response = $provider->createOrder([
            "intent" => "CAPTURE",
            "application_context" => [
                "return_url" => route('successTransaction'),
                "cancel_url" => route('cancelTransaction'),
            ],
            "purchase_units" => [
                0 => [
                    "amount" => [
                        "currency_code" => "USD",
                        "value" => "1000.00"
                    ]
                ]
            ]
        ]);
        if (isset($response['id']) && $response['id'] != null) {
            // redirect to approve href
            foreach ($response['links'] as $links) {
                if ($links['rel'] == 'approve') {
                    return redirect()->away($links['href']);
                }
            }
            return redirect()
                ->route('createTransaction')
                ->with('error', 'Something went wrong.');
        } else {
            return redirect()
                ->route('createTransaction')
                ->with('error', $response['message'] ?? 'Something went wrong.');
        }
    }
    /**
     * success transaction.
     *
     * @return \Illuminate\Http\Response
     */
    public function successTransaction(Request $request)
    {
        $provider = new PayPalClient;
        $provider->setApiCredentials(config('paypal'));
        $provider->getAccessToken();
        $response = $provider->capturePaymentOrder($request['token']);
        if (isset($response['status']) && $response['status'] == 'COMPLETED') {
            return redirect()
                ->route('createTransaction')
                ->with('success', 'Transaction complete.');
        } else {
            return redirect()
                ->route('createTransaction')
                ->with('error', $response['message'] ?? 'Something went wrong.');
        }
    }
    /**
     * cancel transaction.
     *
     * @return \Illuminate\Http\Response
     */
    public function cancelTransaction(Request $request)
    {
        return redirect()
            ->route('createTransaction')
            ->with('error', $response['message'] ?? 'You have canceled the transaction.');
    }
}
